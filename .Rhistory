(m <- matrix(1:10, nrow = 2, ncol = 5))
(dimnames(m) <- list(c("1", "2", "3, "4", "5"), c("1", "2")))
(dimnames(m) <- list(c("1", "2", "3", "4", "5"), c("1", "2")))
(dimnames(m) <- list(c("1", "2"), c("1", "2", "3", "4", "5")))
dimnames(m) <- list(c("1", "2"), c("1", "2", "3", "4", "5"))
m
(z <- data.frame(c(1:4), c("T", "T", "T", "F")))
(z <- data.frame(Header A = c(1:4), Header B = c("T", "T", "T", "F")))
(z <- data.frame("Header A" = c(1:4), "Header B" = c("T", "T", "T", "F")))
(z <- data.frame("Header A" = c(8:12), "Header B" = c("T", "T", "T", "F")))
(z <- data.frame("Header A" = c(8:11), "Header B" = c("T", "T", "T", "F")))
rm(y)
(x <- 1:20)
x[2]
x[3]
x$3
[2]
x[2]
x <- list(foo = 1:4 bar = 0.6)
x <- list("foo" = 1:4 "bar" = 0.6)
x <- list("foo" = 1:4, "bar" = 0.6)
x
x$foo
x[1]
x[[1]]
x[[c(1,2)]]
x[c(1,2)]
x[[c(2,2)]]
x[[c(2,1)]]
x <- list("aadvark" = 1:5)
x
x$a
x[["a"]]
x[["a", exact=F]]
x[["a", exact = FALSE]]
x[["v", exact = FALSE]]
x[["aa", exact = FALSE]]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x,y)
good
x[good]
y[good]
x <- 4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
dim(rbind(x, y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2:3
(x + y)
class(x + y)
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
getwd()
hw1 = read.csv("hw1_data.csv")
head(hw1)
names(hw1)
hw1[(c(1,2)),]
hw1[,(c(1,2))]
hw1[(c(1,2)),]
nrow(hw1)
tail(hw1)
tail(hw1, 2)
hw1[47,]
sub = subset(hw1, is.na(Ozone))
nrow(sub)
sub = subset(hw1, !is.na(Ozone), select = Ozone)
apply(sub, 2, mean)
sub = subset(hw1, Ozone > 31 & Temp > 90, select = Solar.R)
apply(sub, 2, mean)
sub = subset(hw1, Month = 6, select = Temp)
apply(sub, 2, mean)
sub = subset(hw1, Month == 6, select = Temp)
apply(sub, 2, mean)
sub = subset(hw1, Month == 5, select = Ozone)
apply(sub, 2, max)
sub = subset(hw1, Month = 5, select = Ozone)
head(sub)
sub = subset(hw1, Month == 5, select = Ozone)
apply(sub, 2, max)
sub = subset(hw1, Month == 5 & !is.na, select = Ozone)
sub = subset(hw1, Month == 5 & is.na=F, select = Ozone)
sub = subset(hw1, Month == 5 & !is.na(Ozone), select = Ozone)
apply(sub, 2, max)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
len{x[[2]]}
len(x[[2]])
length(x[[2]])
head(hw1, 2)
nrows(hw1)
nrow(hw1)
tail(hw1, 2)
hw1[47,]
subNA = subset(hw1, is.na(Ozone))
nrow(subNA)
subOzoneMean = subset(hw1, select = Ozone)
apply(subOzoneMean, 2, mean)
subOzoneMean = subset(hw1, !is.na(Ozone), select = Ozone)
apply(subOzoneMean, 2, mean)
subQ18 = subset(hw1, Ozone > 31 & Temp > 90, select = Solar.R)
apply(subQ18, 2, mean)
subQ19 = subset(hw1, Month == 6, select = Temp)
apply(subQ19, 2, mean)
subQ20 = subset(hw1, Month == 5, select = Ozone)
apply(subQ20, 2, mean)
subQ20 = subset(hw1, Month == 5 & !is.na(Ozone), select = Ozone)
apply(subQ20, 2, mean)
apply(subQ20, 2, max)
install.packages("KernSmooth")
library(KernSmooth)
x <- c('a','b','c','d')
for (i in seq_along(x)) {
print(x[i])
}
y <- matrix(1:6, nrows = 2, ncols = 3)
y <- matrix(1:6, nrow = 2, ncol = 3)
print(x[i, j])
for(i in seq_len(nrow(y))) {
for(j in seq_len(ncol(y))) {
print(x[i, j])
}
}
for(i in seq_len(nrow(y))) {
for(j in seq_len(ncol(y))) {
print(y[i, j])
}
}
y <- matrix(1:6, nrow = 2, ncol = 3)
y
f <- function(x, y) {
x^2 + y / z
}
f(2,2)
z <- 5
f <- function(x, y) {
x^2 + y / z
}
f(2,2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power(3)
(make.power(3))
cube = make.power(3)
cube(3)
square = make.power(2)
square(3)
square = make.power(3)
square(2)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
time <- Sys.time()
time
?strptime
timeEdited <- strptime(time, "%B %d, %Y %H:%M")
timeEdited
time <- Sys.time()
time
(timeEdited <- strptime(time, "%d %m %Y, %H:%M"))
(timeEdited <- strptime(Sys.time(), "%d %m %Y, %H:%M"))
(timeEdited <- strptime("February 10, 2015 10:55", "%d %m %Y, %H:%M"))
time <- "February 10, 2015 10:55"
?strptime
time
(timeEdited <- strptime("February 10, 2015 10:55", "%d %m %Y, %H:%M"))
(timeEdited <- strptime(Sys.time(), "%d %m %Y, %H:%M"))
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
q <- strptime(datestring, "%B %d, %Y %H:%M")
q
datestring <- Sys.time()
q <- strptime(datestring, "%B %d, %Y %H:%M")
q
datestring <- "January 10, 2012 10:40"
q <- strptime(datestring, "%B %d, %Y %H:%M")
q
q <- strptime(datestring, "%d %m, %Y %H:%M")
q
q <- strptime(datestring, "%B %d, %Y %H:%M")
(q <- strptime(datestring, "%B %d, %Y %H:%M"))
(q <- strptime(datestring, "%b %d, %Y %H:%M"))
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
?runif
x <- matrix(a=1:6, 3, 2)
x <- matrix(1:6, 3, 2)
x
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 1, sum)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
}
x <- 1
x
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
}
printmessage(1)
printmessage(0)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(0)
?invisible
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
invisible(x)
}
printmessage(100)
printmessage <- function(x) {
if (x > 0)
print("x is greater than zero") else print("x is less than or equal to zero")
}
printmessage(100)
?iris
library(datasets)
data(iris)
head(iris)
apply(iris, Sepal.Length, mean)
?apply
head(iris$Sepal.Length)
sub = subset(iris, select == "virginica")
library(datasets)
data(iris)
head(iris)
s <- split(iris, iris$Species)
apply(s$virginica[,1:4], 2, mean)
data(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
head(iris)
with(iris, tapply(Sepal.Length, Species, mean))
makeCacheMatrix <- function(x = matrix()) {
## Initialize the inverse matrix
i <- NULL
## Set the values of the matrix
set <- function(matrix) {
x <<- matrix
i <<- NULL
}
## Get the values of the matrix
get <- function() {
x
}
## Set the values of the inverse matrix
setInverse <- function(inverse) {
i <<- inverse
}
## Get the values of the inverse matrix
getInverse <- function() {
i
}
## Return the methods as a list
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInverse()
## Check if the inverse has already been calculated.
## If already calculated, get the inverse from the
## cache and skip computation.
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## Else, get the matrix
data <- x$get()
## Calculate the inverse matrix
i <- solve(data) %*% data
## Store the inverse matrix in the cache
x$setInverse(i)
## Return the inverse matrix
i
}
makeCacheMatrix(1:4)
?solve
?str
str(1:12)
str(ls)
str(1:4)
str("T", "F")
set.seed(1)
rpois(5, 2)
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?par
?mar
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab="Month", ylab="Ozone (ppb)")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="pink"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="red"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="blue"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in New York City", type="n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col="red"))
legend("topright", pch = 1, col = c("blue","red"), legend = c("May","Other Months"))
x <- rnrom(100)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x, z)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y,pch=20)
plot(x,y,pch=2)
plot(x,y,pch=17)
plot(x,y,pch=21)
plot(x,y,pch=20)
title("Scatterplot")
text(-2,-2, "Label")
legend("topleft", legend="Data")
legend("topleft", legend="Data",pch=20)
abline(fit)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col="blue")
z <- rpois(100,2)
par(mfrow(c(2,1)))
par(mfrow = (c(2,1)))
par(mfrow = c(2,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par("mar")
par(mar = c(2,2,1,1))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow = c(1,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mar = c(4,4,2,2))
plot(x,y,pch=20)
plot(x,z,pch=19)
par(mfrow = c(1,1))
getwd()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
dev.off()
list.files()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser Data")
dev.copy(png, file="geyserplot.png")
dev.off()
getwd()
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=drv~., binwidth=3)
qplot(displ, hwy, data=mpg, facets=drv~., binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
?lpoints()
?panel
??panel
?panel.axis
??panel.axis
??panel.points
??panel.lpoints
??lpoints
??panel.text
setwd("C:\\Users\\Alex\\Documents\\Work\\External Certifications\\Data Science Specialization\\5 - Reproducible Research\\Assignments\\RepData_PeerAssessment1")
unzip(zipfile = "activity.zip")
data <- read.csv("activity.csv")
library(ggplot2)
## Calculate the total number of steps taken per day
totalSteps <- tapply(data$steps, data$date, FUN = sum, na.rm = TRUE)
## Make a histogram of the total number of steps taken each day
qplot(totalSteps,
xlab = "Total number of steps taken each day",
ylab = "Frequency",
main = "Histogram of the total number of steps taken each day",
binwidth = 1000)
## Calculate and report the mean of the total number of steps taken per day
mean(totalSteps)
## Calculate and report the median of the total number of steps taken per day
median(totalSteps)
library(ggplot2)
## Calculate the average number of steps taken averaged across all days
averagePattern <- aggregate(x = list(steps = data$steps), by = list(interval = data$interval), FUN = mean, na.rm = TRUE)
## Make a time series plot
ggplot(averagePattern, aes(x = interval, y = steps)) +
geom_line() +
labs(x = "5-minute interval", y = "Average number of steps taken", title = "Average daily activity pattern")
## Report the 5-minute interval that contains the maximum number of steps
averagePattern[which.max(averagePattern$steps),]
missingValues <- is.na(data$steps)
table(missingValues)
replaceNA <- function(steps, interval) {
toBeReplaced <- NA
if(!is.na(steps)) {
toBeReplaced <- c(steps)
} else {
toBeReplaced <- (averagePattern[averagePattern$interval == interval, "steps"])
}
return(toBeReplaced)
}
dataImputed <- data
dataImputed$steps <- mapply(replaceNA, dataImputed$steps, dataImputed$interval)
missingValuesImp <- is.na(dataImputed$steps)
table(missingValuesImp)
library(ggplot2)
## Calculate the total number of steps taken per day
totalStepsImp <- tapply(dataImputed$steps, dataImputed$date, FUN = sum)
## Make a histogram of the total number of steps taken each day
qplot(totalStepsImp,
xlab = "Total number of steps taken each day",
ylab = "Frequency",
main = "Histogram of the total number of steps taken each day (AFTER imputation)",
binwidth = 1000)
## Calculate and report the mean of the total number of steps taken per day AFTER imputation
mean(totalStepsImp)
## Calculate and report the median of the total number of steps taken per day AFTER imputation
median(totalStepsImp)
?weekdays
weekdayWeekend <- function (date) {
day <- weekdays(date)
if(day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) {
return("weekday")
} else if (day %in% c("Saturday", "Sunday")) {
return("weekend")
} else {
stop("invalid")
}
}
dataImputed$date <- as.Date(dataImputed$date)
View(dataImputed)
dataImputed$day <- sapply(dataImputed$date, FUN = weekdayWeekend)
View(dataImputed)
averagePatternImputed <- aggregate(steps ~ interval + day, data = dataImputed, mean)
View(averagePatternImputed)
ggplot(averagePatternImputed, aes(interval, steps)) +
geom_line() +
facet_grid(day ~ .) +
labs(x = "5-minute interval", y = "Average number of steps taken", title = "Average daily activity pattern")
?as.date
??as.date
ggplot(averagePatternImputed, aes(x = interval, y = steps, color = day)) +
geom_line() +
facet_grid(day ~ .) +
labs(x = "5-minute interval", y = "Average number of steps taken", title = "Average daily activity pattern")
ggplot(averagePatternImputed, aes(x = interval, y = steps, color = day)) +
geom_line() +
facet_grid(day ~ .) +
theme(legend.position = "none") +
labs(x = "5-minute interval", y = "Average number of steps taken", title = "Average daily activity pattern")
